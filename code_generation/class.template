{% macro for_type(variable) -%}{% for type in variable.types %}{{ type.string }}{% if not loop.last %}, {% endif -%}{% endfor %}{%- endmacro -%}
{% macro types_as_tuple(variable) -%}{% if variables.type|length > 1 %}({{ for_type(variable) }}){% else -%}{{ for_type(variable) }}{% endif -%}{%- endmacro -%}
{% macro for_args() -%}{%- for variable in variables %}{{ variable.name }}{% if variable.optional %}=None{% endif %}{% if not loop.last %}, {% endif -%}{%- endfor %}{% endmacro %}


class {{ clazz }}({{ parent_clazz }}):
    """
    {%- block class_docstring -%}
    {{ description|indent }}

    {{link}}

    {% if parameters %}
    Parameters:
        {% for param in parameters %}
        :param {{ param.name }}: {{ param.description }}
        :type  {{ param.name }}: {{ for_type(param) }}
        {% endfor %}
    {% endif %}
    {% if keywords -%}
    Optional keyword parameters:
        {% for keyword in keywords %}
        :keyword {{ keyword.name }}: {{ keyword.description }}
        :type    {{ keyword.name }}: {{ for_type(keyword) }}
        {% endfor %}
    {% endif -%}
    {% endblock %}
    """
    def __init__(self, {{ for_args() }}):
        """
        {{ self.class_docstring()|indent }}
        """
        super({{ clazz }}, self).__init__()

        {% block imports_block -%}
        {%- for import in imports -%}
        from {{ import.path }} import {{ import.name }}
        {#  -#}
        {%- endfor -%}
        {%- endblock %}

        {% for variable in variables -%}
        {% if variable.optional %}
        assert({{ variable.name }} is None or isinstance({{ variable.name }}, {{ types_as_tuple(variable) }}))
        {%- else %}
        assert({{ variable.name }} is not None)
        assert(isinstance({{ variable.name }}, {{ types_as_tuple(variable) }}))
        {%- endif %}
        {% if variable.always_is_value %}
        assert({{ variable.name }} == {{ variable.always_is_value }})
        {% endif -%}
        self.{{ variable.name }} = {{ variable.name }}
        {%- if not loop.last %}
        {% endif %}
        {%- endfor -%}
    {#  #}
    # end def __init__

    """
    Serializes this {{ clazz }} to an dictionary.

    :return: dictionary repesentation of this object.
    :rtype: dict
    """
    def to_array(self):
        array = super({{ clazz }}, self).to_array()

        {% for variable in variables -%}
        {% if variable.types|length == 1 -%}
        {% if variable.types[0].is_builtin -%}
        array['{{ variable.api_name }}'] = {{ variable.types[0].string }}(self.{{ variable.name }})  # type {{ variable.types[0].string }}
        {% else -%}
        array['{{ variable.api_name }}'] = self.{{ variable.name }}.to_array()  # type {{ variable.types[0].string }}
        {% endif -%}
        {% else -%}
        // ERROR: Multible types ({{ for_type(variable) }}) for
        // array['{{ variable.api_name }}'] = self.{{ variable.name }}
        {% endif -%}
        {% endfor -%}
        return array
    # end def to_array

    """
    Deserializes a new {{ clazz }} from an given dictionary.

    :return: new {{ clazz }} instance.
    :rtype: {{ clazz }}
    """
    @staticmethod
    def from_array(array):
        if array is None:
            return None
        # end if

        {{ self.imports_block() }}

        data = {}
        {% for variable in variables -%}

        {% endfor %}
        {% for variable in variables -%}
        {% if variable.types|length == 1 -%}
        {% if variable.types[0].is_builtin -%}
        data['{{ variable.name }}'] = {{ variable.types[0].string }}(array.get('{{ variable.api_name }}'))
        {% else -%}
        data['{{ variable.name }}'] = {{ variable.types[0].string }}.from_array(array.get('{{ variable.api_name }}'))
        {% endif -%}
        {% else -%}
        // ERROR: Multible types ({{ for_type(variable) }}) for
        // data['{{ variable.api_name }}'] = {{ variable.name }}
        {% endif -%}
        {% endfor -%}
        return {{ clazz }}(**data)
    # end def from_array
# end class {{ clazz }}
