{% macro for_type(variable) -%}{% for type in variable.types %}{{ type.string }}{% if not loop.last %}, {% endif -%}{% endfor %}{%- endmacro -%}
{% macro types_as_tuple(variable) -%}{% if variable.types|length > 1 %}({{ for_type(variable) }}){% else -%}{{ for_type(variable) }}{% endif -%}{%- endmacro -%}
{% macro for_args()     -%}{%- for variable in variables %}{{ variable.name }}{% if variable.optional %}=None               {%- endif %}{% if not loop.last %}, {% endif -%}{%- endfor %}{% endmacro %}
{% macro for_args_set() -%}{%- for variable in variables %}{{ variable.name }}{% if variable.optional %}={{ variable.name }}{%- endif %}{% if not loop.last %}, {% endif -%}{%- endfor %}{% endmacro %}

    def {{ func }}(self, {{ for_args() }}):
    """
    {% block func_docstring -%}
    {{ description|indent }}

    {{link}}

    {% if parameters %}
    Parameters:
    {% for param in parameters %}
        :param {{ param.name }}: {{ param.description }}
        :type  {{ param.name }}: {{ for_type(param) }}
    {% endfor %}
    {% endif %}
    {% if keywords -%}
    Optional keyword parameters:
    {% for keyword in keywords %}
        :keyword {{ keyword.name }}: {{ keyword.description }}
        :type    {{ keyword.name }}: {{ for_type(keyword) }}
    {% endfor %}
    {% endif -%}

    Returns:

        :return: {{ returns }}
        :rtype:  {{ return_type.full }}
    {% endblock -%}
    """
        {% block imports_block -%}
        {%- for import in imports -%}
        from {{ import.path }} import {{ import.name }}
        {%- endfor %}
        {%- endblock %}

        {% for variable in variables -%}
        {% if variable.optional -%}
        assert({{ variable.name }} is None or isinstance({{ variable.name }}, {{ types_as_tuple(variable) }}))
        {%- else -%}
        assert({{ variable.name }} is not None)
        assert(isinstance({{ variable.name }}, {{ types_as_tuple(variable) }}))
        {%- endif %}
        {% if variable.always_is_value %}
        assert({{ variable.name }} == {{ variable.always_is_value }})
        {% endif -%}
        self.{{ variable.name }} = {{ variable.name }}
        {%- if not loop.last %}
        {% endif %}
        {#  -#}
        {%- endfor -%}
        {#  #}
        return self.do({{ for_args_set() }})
    # end def {{ func }}
