{% from "macros.template" import for_args_none, for_type_full, types_as_assert_tuple, for_args_set %}
    def {{ function.name }}(self, {{ for_args_none(function.variables) }}):
        """
        {% block func_docstring -%}
        {{ function.description|indent(8) }}

        {{function.link}}

        {% if function.parameters %}
        Parameters:
        {% for param in function.parameters %}
        :param {{ param.name }}: {{ param.description }}
        :type  {{ param.name }}: {{ for_type_full(param) }}
        {% endfor %}
        {% endif %}
        {% if function.keywords -%}
        Optional keyword parameters:
        {% for keyword in function.keywords %}
        :keyword {{ keyword.name }}: {{ keyword.description }}
        :type    {{ keyword.name }}: {{ for_type_full(keyword) }}
        {% endfor %}
        {% endif -%}


        Returns:

        :return: {{ function.returns.description }}
        :rtype:  {{ for_type_full(function.returns) }}
        {% endblock -%}
        """
        {% block imports_block -%}
        {%- for import in function.imports -%}
        from {{ import.path }} import {{ import.name }}
        {%- if loop.last %}
        {% endif %}
        {% endfor -%}
        {%- endblock %}

        {%- for variable in function.variables -%}
        {% if variable.optional -%}
        assert({{ variable.name }} is None or isinstance({{ variable.name }}, {{ types_as_assert_tuple(variable) }}))
        {% else -%}
        assert({{ variable.name }} is not None)
        assert(isinstance({{ variable.name }}, {{ types_as_assert_tuple(variable) }}))
        {% endif -%}
        {%- if variable.always_is_value -%}
        assert({{ variable.name }} == {{ variable.always_is_value }})
        {%- endif -%}
        {%- if not loop.last %}
        {% endif %}
        {%- endfor -%}
        {#  #}
        return self.do("{{ function.api_name }}", {{ for_args_set() }})
    # end def {{ function.name }}
