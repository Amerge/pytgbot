# -*- coding: utf-8 -*-
class Bot(object):
    _base_url = "https://api.telegram.org/bot{api_key}/{command}"

    def __init__(self, api_key):
        if api_key is None:
            raise ValueError("No api_key given.")
        self.api_key = api_key
        self._last_update = datetime.now()
    # end def __init__

    {% for func in functions -%}
    {{ func|indent }}
    {%- endfor %}

    send_msg = send_message  """ alias to :func:`send_message` """

    def do(self, command, files=None, use_long_polling=False, **query):
        """
        Send a request to the api.

        :param command: The Url command parameter
        :param files: if it needs to send files.
        :param use_long_polling: if it should use long polling.
                                (see http://docs.python-requests.org/en/latest/api/#requests.Response.iter_content)
        :param query: will get json encoded.
        :return:
        """
        params = {}
        for key in query.keys():
            element = query[key]
            if element is not None:
                if isinstance(element, Sendable):
                    params[key] = json.dumps(as_array(element))
                else:
                    params[key] = element
        url = self._base_url.format(api_key=n(self.api_key), command=n(command))
        r = requests.post(url, params=params, files=files, stream=use_long_polling,
                          verify=True)  # No self signed certificates. Telegram should be trustworthy anyway...
        res = DictObject.objectify(r.json())
        res["response"] = r  # TODO: does this failes on json lists? Does TG does that?
        # TG should always return an dict, with at least a status or something.
        return res
    # end def do

    def _do_fileupload(self, file_param_name, value, **kwargs):
        if isinstance(value, str):
            kwargs[file_param_name] = str(value)
        elif isinstance(value, unicode_type):
            kwargs[file_param_name] = n(value)
        elif isinstance(value, InputFile):
            kwargs["files"] = value.get_request_files(file_param_name)
        else:
            raise TypeError("Parameter {key} is not type (str, {text_type}, {input_file_type}), but type {type}".format(
                key=file_param_name, type=type(value), input_file_type=InputFile, text_type=unicode_type))
        return self.do("send{cmd}".format(cmd=file_param_name.capitalize()), **kwargs)
    # end def _do_fileupload
# end class Bot
