# -*- coding: utf-8 -*-
from luckydonaldUtils.logger import logging
from .exceptions import TgApiServerException, TgApiParseException

__author__ = 'luckydonald'
__all__ = ["Bot"]

logger = logging.getLogger(__name__)


class Bot(object):
    _base_url = "https://api.telegram.org/bot{api_key}/{command}"

    def __init__(self, api_key, return_python_objects=True):
        """
        A Bot instance. From here you can call all the functions.
        The api key can be optained from @BotFather, see https://core.telegram.org/bots#6-botfather

        :param api_key: The API key. Something like "ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
        :type  api_key: str

        :keyword return_python_objects: If it should convert the json to `pytgbot.api_types.**` objects.
        :type    return_python_objects: bool
        """
        from datetime import datetime

        if api_key is None or not api_key:
            raise ValueError("No api_key given.")
        self.api_key = api_key
        self.return_python_objects = return_python_objects
        self._last_update = datetime.now()
    # end def __init__

    {% for function in functions -%}
    {% include "func.template" -%}
    {#- strip end #}
    {% endfor %}
    def send_msg(self, *args, **kwargs):
        """ alias to :func:`send_message` """
        return self.send_message(*args, **kwargs)
    # end def send_msg

    def do(self, command, files=None, use_long_polling=False, **query):
        """
        Send a request to the api.

        If the bot is set to return the json objects, it will look like this:

        ```json
        {
            "ok": bool, "result": {...},
            # optionally present:
            "description": "human-readable description of the result",
            "error_code": int
        }
        ```

        :param command: The Url command parameter
        :param files: if it needs to send files.
        :param use_long_polling: if it should use long polling.
                                (see http://docs.python-requests.org/en/latest/api/#requests.Response.iter_content)
        :param query: will get json encoded.
        :return: The json response from the server.
        :rtype: DictObject.DictObject
        """
        from pytgbot.api_types.sendable import Sendable
        from pytgbot.api_types import as_array
        from DictObject import DictObject
        import requests
        import json

        params = {}
        for key in query.keys():
            element = query[key]
            if element is not None:
                if isinstance(element, Sendable):
                    params[key] = json.dumps(as_array(element))
                else:
                    params[key] = element
        url = self._base_url.format(api_key=n(self.api_key), command=n(command))
        r = requests.post(url, params=params, files=files, stream=use_long_polling,
                          verify=True)  # No self signed certificates. Telegram should be trustworthy anyway...
        res = DictObject.objectify(r.json())
        res["response"] = r  # TODO: does this failes on json lists? Does TG does that?
        # TG should always return an dict, with at least a status or something.
        if self.return_python_objects:
            if res.ok != True:
                raise TgApiServerException(
                    error_code=res.error_code if "error_code" in res else None,
                    response=res.response if "response" in res else None,
                    description=res.description if "description" in res else None
                )
            # end if not ok
            if "result" not in res:
                raise TgApiParseException('Key "result" is missing.')
            # end if no result
            return res.result
        # end if return_python_objects
        return res
    # end def do

    def _do_fileupload(self, file_param_name, value, **kwargs):
        from pytgbot.api_types.sendable import InputFile
        from luckydonaldUtils.encoding import unicode_type
        from luckydonaldUtils.encoding import to_native as n

        if isinstance(value, str):
            kwargs[file_param_name] = str(value)
        elif isinstance(value, unicode_type):
            kwargs[file_param_name] = n(value)
        elif isinstance(value, InputFile):
            kwargs["files"] = value.get_request_files(file_param_name)
        else:
            raise TypeError("Parameter {key} is not type (str, {text_type}, {input_file_type}), but type {type}".format(
                key=file_param_name, type=type(value), input_file_type=InputFile, text_type=unicode_type))
        return self.do("send{cmd}".format(cmd=file_param_name.capitalize()), **kwargs)
    # end def _do_fileupload

    @staticmethod
    def _parse_builtin_type(result, clazz, list_level):
        """
        Tries to parse the result as type given in clazz.

        :param result: The result to parse

        :param clazz: What it should be parsed as
        :type  clazz: class

        :param list_level: "list of" * list_level
        :type  list_level: int

        :return: the result as clazz type
        """
        assert (list_level == 0)  # todo: implement
        try:
            if isinstance(result, clazz):
                logger.debug("Already is correct type.")
                return clazz(result)
            else:
                import ast
                logger.debug("Trying parsing with ast.literal_eval()...")
                return ast.literal_eval(str(result))  # raises ValueError if it could not parse
            # end if
        except ValueError:
            logger.debug("Failed parsing as primitive {type}".format(type=type(clazz)), exc_info=True)
        # end try
    # end def _parse_builtin_type

    @staticmethod
    def _parse_api_type(result, clazz, list_level):
        """
        Tries to parse the result as type given in clazz.

        :param result: The result to parse

        :param clazz: What it should be parsed as
        :type  clazz: class

        :param list_level: "list of" * list_level
        :type  list_level: int

        :return: the result as clazz type
        """
        assert (list_level == 0)  # todo: implement
        try:
            return clazz.from_array(result)
        except TgApiParseException:
            logger.debug("Failed parsing as api_type {type}".format(type=type(clazz)), exc_info=True)
        # end try
    # end def _parse_api_type
# end class Bot

